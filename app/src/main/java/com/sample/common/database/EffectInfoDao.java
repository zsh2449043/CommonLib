package com.sample.common.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EFFECT_INFO".
*/
public class EffectInfoDao extends AbstractDao<EffectInfo, Long> {

    public static final String TABLENAME = "EFFECT_INFO";

    /**
     * Properties of entity EffectInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TableThumbUri = new Property(1, String.class, "tableThumbUri", false, "TABLE_THUMB_URI");
        public final static Property TableMode = new Property(2, String.class, "tableMode", false, "TABLE_NODE");
        public final static Property UriKey = new Property(3, String.class, "uriKey", false, "URI_KEY");
        public final static Property UriValue = new Property(4, String.class, "uriValue", false, "URI_VALUE");
        public final static Property GpSuk = new Property(5, String.class, "gpSuk", false, "GP_SUK");
        public final static Property IsHot = new Property(6, boolean.class, "isHot", false, "IS_HOT");
        public final static Property IsNew = new Property(7, boolean.class, "isNew", false, "IS_NEW");
        public final static Property SubType = new Property(8, String.class, "subType", false, "SUB_TYPE");
        public final static Property Price = new Property(9, String.class, "price", false, "PRICE");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
    }


    public EffectInfoDao(DaoConfig config) {
        super(config);
    }
    
    public EffectInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EFFECT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TABLE_THUMB_URI\" TEXT," + // 1: tableThumbUri
                "\"TABLE_NODE\" TEXT," + // 2: tableMode
                "\"URI_KEY\" TEXT," + // 3: uriKey
                "\"URI_VALUE\" TEXT UNIQUE ," + // 4: uriValue
                "\"GP_SUK\" TEXT UNIQUE ," + // 5: gpSuk
                "\"IS_HOT\" INTEGER NOT NULL ," + // 6: isHot
                "\"IS_NEW\" INTEGER NOT NULL ," + // 7: isNew
                "\"SUB_TYPE\" TEXT," + // 8: subType
                "\"PRICE\" TEXT," + // 9: price
                "\"NAME\" TEXT);"); // 10: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EFFECT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EffectInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tableThumbUri = entity.getTableThumbUri();
        if (tableThumbUri != null) {
            stmt.bindString(2, tableThumbUri);
        }
 
        String tableMode = entity.getTableMode();
        if (tableMode != null) {
            stmt.bindString(3, tableMode);
        }
 
        String uriKey = entity.getUriKey();
        if (uriKey != null) {
            stmt.bindString(4, uriKey);
        }
 
        String uriValue = entity.getUriValue();
        if (uriValue != null) {
            stmt.bindString(5, uriValue);
        }
 
        String gpSuk = entity.getGpSuk();
        if (gpSuk != null) {
            stmt.bindString(6, gpSuk);
        }
        stmt.bindLong(7, entity.getIsHot() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsNew() ? 1L: 0L);
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(9, subType);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EffectInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tableThumbUri = entity.getTableThumbUri();
        if (tableThumbUri != null) {
            stmt.bindString(2, tableThumbUri);
        }
 
        String tableMode = entity.getTableMode();
        if (tableMode != null) {
            stmt.bindString(3, tableMode);
        }
 
        String uriKey = entity.getUriKey();
        if (uriKey != null) {
            stmt.bindString(4, uriKey);
        }
 
        String uriValue = entity.getUriValue();
        if (uriValue != null) {
            stmt.bindString(5, uriValue);
        }
 
        String gpSuk = entity.getGpSuk();
        if (gpSuk != null) {
            stmt.bindString(6, gpSuk);
        }
        stmt.bindLong(7, entity.getIsHot() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsNew() ? 1L: 0L);
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(9, subType);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EffectInfo readEntity(Cursor cursor, int offset) {
        EffectInfo entity = new EffectInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tableThumbUri
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tableMode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uriKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uriValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gpSuk
            cursor.getShort(offset + 6) != 0, // isHot
            cursor.getShort(offset + 7) != 0, // isNew
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EffectInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTableThumbUri(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTableMode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUriKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUriValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGpSuk(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsHot(cursor.getShort(offset + 6) != 0);
        entity.setIsNew(cursor.getShort(offset + 7) != 0);
        entity.setSubType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EffectInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EffectInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EffectInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
